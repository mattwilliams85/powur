'use strict';

function AdminUserGroupsCtrl($scope, $location, $routeParams, $anchorScroll, $http, AdminUserGroup) {
  $scope.redirectUnlessSignedIn();
  $scope.view = 'overview';
  $scope.userGroup = {};
  $scope.formErrorMessages = {};
  // TODO check if user is an admin

  // Utility Functions

  function getAction(actions, name) {
    for (var i in actions) {
      if (actions[i].name === name) {
        return actions[i];
      }
    }
    return;
  }

  $scope.confirm = function(msg, clickAction, arg) {
    if (window.confirm(msg)) {
      return $scope.$eval(clickAction)(arg);
    }
  };

  $scope.cancel = function() {
    $location.path('/admin/user-groups/');
  };

  $scope.errorMessage = function(name) {
    return $scope.formErrorMessages[name];
  };

  $scope.pagination = function(direction) {
    var page = $scope.itemsPaging.current_page + direction;
    return AdminUserGroup.list().then(function(items) {
      $scope.userGroups = items.entities;
      $anchorScroll();
    });
  };

  // Create Action & Related Callbacks

  $scope.create = function() {
    if ($scope.userGroup) {
      $scope.isSubmitDisabled = true;
      AdminUserGroup.create($scope.userGroup).then(createCallback, createErrorCallback);
    }
  };

  var createCallback = function() {
    $location.path('/admin/user-groups');
    $scope.showModal('You\'ve successfully added a new User Group.');
    $(document).foundation();
    $scope.isSubmitDisabled = false;
  };

  var createErrorCallback = function(data) {
    $scope.formErrorMessages = {};
    var keys = ['id', 'title'];
    for(var i in keys) {
      $scope.userGroupForm[keys[i]].$dirty = false;
      var errorMessage = data.errors[keys[i]];
      if (errorMessage) {
        $scope.userGroupForm[keys[i]].$dirty = true;
        $scope.formErrorMessages[keys[i]] = errorMessage[0];
      }
    }
    $scope.isSubmitDisabled = false;
  };

  // Update Action & Related Callbacks

  $scope.update = function() {
    if ($scope.userGroup) {
      $scope.isSubmitDisabled = true;
      AdminUserGroup.update($scope.userGroup).then(updateCallback, createErrorCallback);
    }
  };

  var updateCallback = function() {
    $location.path('/admin/user-groups/' + $scope.userGroup.id);
    $scope.showModal('You\'ve successfully updated the User Group.');
    $(document).foundation();
    $scope.isSubmitDisabled = false;
  };

  // Delete Action

  $scope.delete = function(item) {
    var action = getAction(item.actions, 'delete');
    var title = item.properties.title;
    return AdminUserGroup.execute(action).then(function() {
      $scope.showModal(title + ' has been deleted');
      $(document).foundation();
      $location.path('/admin/user-groups/');
    }, function() {
      $scope.showModal('Oops error deleting the User Group');
      $(document).foundation();
    });
  };

  // List Actions

  $scope.getUsersFromGroup = function (groupId) {
    $http({
      method: 'GET',
      url: '/a/users.json?group=' + groupId
    }).success(function(res) {
      $scope.users = res.entities;
    }).error(function(err) {
      console.log('エラー', err);
    });
  };

  this.init($scope, $location);
  this.fetch($scope, $location, $routeParams, AdminUserGroup);
}


AdminUserGroupsCtrl.prototype.init = function($scope, $location) {
  // Setting mode based on the url
  $scope.mode = 'show';
  if (/\/user-groups$/.test($location.path())) return $scope.mode = 'index';
  if (/\/new$/.test($location.path())) return $scope.mode = 'new';
  if (/\/edit$/.test($location.path())) return $scope.mode = 'edit';
};


AdminUserGroupsCtrl.prototype.fetch = function($scope, $location, $routeParams, AdminUserGroup) {
  if ($scope.mode === 'index') {
    return AdminUserGroup.list().then(function(items) {
      $scope.userGroups = items.entities;
    });
  } else if ($scope.mode === 'new') {
    $scope.disableIdEdit = false;

  } else if ($scope.mode === 'show') {
    return AdminUserGroup.get($routeParams.userGroupId).then(function(item) {
      $scope.userGroup = item.properties;

      // get users from /a/users endpoint
      $scope.users = [];
      $scope.getUsersFromGroup(item.properties.id);

      // get requirements
      $scope.requirements = item.entities[1].entities;

    });

  } else if ($scope.mode === 'edit') {
    return AdminUserGroup.get($routeParams.userGroupId).then(function(item) {
      $scope.userGroup = item.properties;
      $scope.group = item;
      $scope.disableIdEdit = true;
    });
  }
};


AdminUserGroupsCtrl.$inject = ['$scope', '$location', '$routeParams', '$anchorScroll', '$http', 'AdminUserGroup'];
sunstandControllers.controller('AdminUserGroupsCtrl', AdminUserGroupsCtrl);

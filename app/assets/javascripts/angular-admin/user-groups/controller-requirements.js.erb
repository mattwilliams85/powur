'use strict';

function AdminUserGroupRequirementsCtrl($scope, $location, $routeParams, $anchorScroll, $http, AdminUserGroup) {
  $scope.redirectUnlessSignedIn();
  $scope.view = 'requirements';
  $scope.requirement = {};
  $scope.formErrorMessages = {};

  // TODO check if user is an admin

  // Utility Functions
  $scope.getAction = function (actions, name) {
    for (var i in actions) {
      if (actions[i].name === name) {
        return actions[i];
      }
    }
    return;
  }

  $scope.getRequirementById = function (userGroup, requirementId) {
    for (var i in userGroup.entities[1].entities) {
      if (userGroup.entities[1].entities[i].properties.id === parseInt(requirementId)) {
        return (userGroup.entities[1].entities[i]);
      }
    }
    return;
  }

  $scope.formCancel = function() {
    $location.path('/admin/#/user-groups/'+ $scope.userGroup.id + '/requirements');
  };

  $scope.backToGroupList = function() {
    $location.path('/admin/#/user-groups/');
  };

  // Create Requirement Action
  $scope.create = function() {
    if ($scope.requirement) {
      $scope.isSubmitDisabled = true;
      AdminUserGroup.execute($scope.formAction, $scope.requirement).then(actionCallback($scope.formAction));
    }
  };

  // Update Requirement Action
  $scope.update = function() {
    if ($scope.requirement) {
      AdminUserGroup.execute($scope.formAction, $scope.requirement).then(actionCallback($scope.formAction));
    }
  }

  // Generic Requirement execute() Function & Related Callback
  $scope.execute = function (action, requirement) {
    if (action.name === 'update') {
      $scope.requirement = requirement;
      $location.path('/admin/user-groups/' + $scope.userGroup.id + '/requirements/' + requirement.properties.id + '/edit');
    } else if (action.name === 'delete') {
      if (window.confirm("Are you sure you want to delete this requirement?")) {
        AdminUserGroup.execute(action, requirement).then(actionCallback(action));
      }
    } else {
      AdminUserGroup.execute(action, requirement).then(actionCallback(action));
    }
  }

  var actionCallback = function(action) {
    var destination = '/admin/user-groups/' + $scope.userGroup.id + '/requirements',
        modalMessage = '';
    if (action.name === 'create') {
      destination = ('/admin/user-groups/' + $scope.userGroup.id + '/requirements');
      modalMessage = ('You\'ve successfully added a new requirement.')
      $scope.isSubmitDisabled = false;
    } else if (action.name === 'update') {
      destination = ('/admin/user-groups/' + $scope.userGroup.id + '/requirements');
      modalMessage = ('You\'ve successfully updated this requirement.')
    } else if (action.name === 'delete') {
      destination = ('/admin/user-groups/' + $scope.userGroup.id + '/requirements');
      modalMessage = ('You\'ve successfully deleted this requirement.')
    }
    return AdminUserGroup.get($routeParams.userGroupId).then(function(item) {
      $location.path(destination)
      $scope.requirements = item.entities[1].entities;
      $(document).foundation();
      $scope.showModal(modalMessage)
    });
  };

  this.init($scope, $location);
  this.fetch($scope, $location, $routeParams, AdminUserGroup);
}

AdminUserGroupRequirementsCtrl.prototype.init = function($scope, $location) {
  $scope.reqMode = 'index';
  if (/\/requirements$/.test($location.path())) return $scope.reqMode = 'index';
  if (/\/new$/.test($location.path())) return $scope.reqMode = 'new';
  if (/\/edit$/.test($location.path())) return $scope.reqMode = 'edit';
}

AdminUserGroupRequirementsCtrl.prototype.fetch = function($scope, $location, $routeParams, AdminUserGroup) {
  if ($scope.reqMode === 'index') {
    return AdminUserGroup.get($routeParams.userGroupId).then(function(item) {
      $scope.userGroup = item.properties;
      $scope.requirements = item.entities[1].entities;
    });
  } else if ($scope.reqMode === 'new') {
    return AdminUserGroup.get($routeParams.userGroupId).then(function(item) {
      $scope.userGroup = item.properties;
      $scope.requirement = {};
      $scope.formAction = $scope.getAction(item.entities[1].actions, 'create');
    });
  } else if ($scope.reqMode === 'edit') {
    return AdminUserGroup.get($routeParams.userGroupId).then(function(item) {
      $scope.userGroup = item.properties;
      $scope.requirementObj = $scope.getRequirementById(item, $routeParams.requirementId);
      $scope.formAction = $scope.getAction($scope.requirementObj.actions, 'update');

      var fields = $scope.formAction.fields;
      // Holy Loop to fill form with existing values ðŸ™Œ
      for (var i in fields) {
        $scope.requirement[fields[i].name] = fields[i].value;
      }
    });
  }
}


AdminUserGroupRequirementsCtrl.$inject = ['$scope', '$location', '$routeParams', '$anchorScroll', '$http', 'AdminUserGroup'];
sunstandControllers.controller('AdminUserGroupRequirementsCtrl', AdminUserGroupRequirementsCtrl);
